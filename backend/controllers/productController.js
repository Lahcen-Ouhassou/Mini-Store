const Product = require("../models/productModel");

// ==================== CREATE PRODUCT ====================
const createProduct = async (req, res) => {
  try {
    // multer kaydir req.file.path ila tsawrat image
    const imagePath = req.file ? req.file.path : undefined;

    const product = new Product({
      name: req.body.name,
      price: req.body.price,
      description: req.body.description,
      category: req.body.category,
      stock: req.body.stock,
      ...(imagePath && { image: imagePath }), // ila kayna tswira n7otha
    });

    const savedProduct = await product.save();

    res.status(201).json({
      message: "‚úÖ Product Created Successfully",
      product: savedProduct,
    });
  } catch (error) {
    console.error("Error Creating Product:", error);
    res.status(500).json({ message: "‚ùå Error creating product", error });
  }
};

// ==================== GET ALL PRODUCTS ====================
const getAllProducts = async (req, res) => {
  try {
    // query ŸÜÿ¨Ÿäÿ®Ÿà ÿßŸÑŸÇŸäŸÖ ŸÖŸÜ ÿßŸÑŸÄ
    const keyword = req.query.keyword
      ? {
          name: { $regex: req.query.keyword, $options: "i" }, // $options: "i" ‚Üí ŸÉÿ™ÿÆŸÑŸä ÿßŸÑÿ®ÿ≠ÿ´ ŸÖÿß ŸäŸÅÿ±ŸÇÿ¥ ÿ®ŸäŸÜ ÿßŸÑÿ≠ÿ±ŸàŸÅ ÿßŸÑŸÉÿ®Ÿäÿ±ÿ© ŸàÿßŸÑÿµÿ∫Ÿäÿ±ÿ©
        }
      : {};

    const category = req.query.category
      ? {
          category: req.query.category,
        }
      : {};

    //  Ÿàÿßÿ≠ÿØ object ŸÜÿØŸÖÿ¨ŸàŸáŸÖ ŸÅŸÄ
    const filter = { ...keyword, ...category }; // Apple ŸàÿßŸÑŸÅÿ¶ÿ© ÿØŸäÿßŸÑŸáÿß Phones ÿ®ÿ≠ÿßŸÑ ÿ•ŸÑŸâ ŸÇŸÑÿ™: ÿ¨Ÿäÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™ ÿßŸÑŸÑŸä ÿßŸÑÿßÿ≥ŸÖ ŸÅŸäŸáÿß

    // Pagination setup
    const page = Number(req.query.page) || 1; // page ‚Üí ÿ±ŸÇŸÖ ÿßŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ≠ÿßŸÑŸäÿ© (ŸÖÿ´ŸÑÿßŸã 1 ÿ£Ÿà 2).  (ida ktb lmostkhadim page=2 ay3tih page tanya mktb walo ay3tih qutomatiqument page=1)
    const limit = Number(req.query.limit) || 10; // limit ‚Üí ÿ¥ÿ≠ÿßŸÑ ŸÖŸÜ ŸÖŸÜÿ™Ÿàÿ¨ ŸÅŸÉŸÑ ÿµŸÅÿ≠ÿ©. (ida ktb lmostakhdim 5 ay3tih limit =5 ila mktbhach ay3tih automatique 10)
    const skip = (page - 1) * limit; // skip ‚Üí ÿ¥ÿ≠ÿßŸÑ ŸÖŸÜ ŸÖŸÜÿ™Ÿàÿ¨ ŸÜÿ™ÿ¨ÿßŸàÿ≤ ÿ®ÿßÿ¥ ŸÜŸàÿµŸÑ ŸÑÿ®ÿØÿßŸäÿ© ÿßŸÑÿµŸÅÿ≠ÿ© ÿßŸÑÿ¨ÿØŸäÿØÿ©.

    // ŸÜÿ¨Ÿäÿ® ÿßŸÑŸÖŸÜÿ™ÿ¨ÿßÿ™
    const products = await Product.find(filter)
      .sort({ createdAt: -1 }) // ŸÉŸäÿ±ÿ™ÿ®ŸáŸÖ ŸÖŸÜ ÿßŸÑÿ£ÿ≠ÿØÿ´ ÿ•ŸÑŸâ ÿßŸÑÿ£ŸÇÿØŸÖ
      .skip(skip) // .skip(skip) ‚Üí Ÿäÿ™ÿ¨ÿßŸàÿ≤ ÿπÿØÿØ ŸÖÿπŸäŸÜ ŸÖŸÜ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨.
      .limit(limit); // .limit(limit) ‚Üí Ÿäÿ¨Ÿäÿ® ÿπÿØÿØ ŸÖÿ≠ÿØÿØ ŸÅŸÇÿ∑ (ŸÖÿ´ŸÑÿßŸã 10 ÿ£Ÿà 5).

    //  ŸÜÿ¨Ÿäÿ® ÿßŸÑÿπÿØÿØ ÿßŸÑŸÉŸÑŸä ÿ®ÿßÿ¥ ŸÜÿπÿ±ŸÅ ÿπÿØÿØ ÿßŸÑÿµŸÅÿ≠ÿßÿ™
    const total = await Product.countDocuments(filter);

    // ‚úÖ ÿßŸÑŸÜÿ™Ÿäÿ¨ÿ©
    res.json({
      success: true,
      currentPage: page,
      totalPages: Math.ceil(total / limit),
      totalProducts: total,
      products,
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({
      success: false,
      message: "‚ùå Error while getting products",
      error: error.message,
    });
  }
};

// ==================== GET ONE PRODUCT BY ID ====================
const getProductById = async (req, res) => {
  try {
    const product = await Product.findById(req.params.id);
    if (!product)
      return res.status(404).json({ message: "‚ùå Product not Found" });

    res.status(200).json(product);
  } catch (error) {
    res
      .status(500)
      .json({ message: "‚ùå Error fetching Product", error: error.message });
  }
};

// ==================== UPDATE PRODUCT ====================
const updateProduct = async (req, res) => {
  try {
    const { name, price, description, category, stock } = req.body;

    // ŸÜÿ≠ÿ∂ÿ±Ÿà object ŸÅŸäŸá ÿßŸÑÿ™ÿ≠ÿØŸäÿ´ÿßÿ™ ÿßŸÑÿ¨ÿØŸäÿØÿ©
    const updatedData = { name, price, description, category, stock };

    // ÿ•ÿ∞ÿß ÿßŸÑŸÖÿ≥ÿ™ÿÆÿØŸÖ ÿ±ŸÅÿπ ÿµŸàÿ±ÿ© ÿ¨ÿØŸäÿØÿ©
    if (req.file) {
      updatedData.image = `/uploads/${req.file.filename}`;
    }

    // ŸÜÿØŸäÿ±Ÿà ÿßŸÑÿ™ÿ≠ÿØŸäÿ´
    const updatedProduct = await Product.findByIdAndUpdate(
      req.params.id,
      updatedData,
      { new: true, runValidators: true }
    );

    if (!updatedProduct)
      return res.status(404).json({ message: "‚ùå Product not Found" });

    res.status(200).json({
      message: "‚úÖ Product Updated Successfully!",
      product: updatedProduct,
    });
  } catch (error) {
    res.status(500).json({
      message: "‚ùå Error Updating Product",
      error: error.message,
    });
  }
};

// ==================== DELETE PRODUCT ====================
const deleteProduct = async (req, res) => {
  try {
    const deletedProduct = await Product.findByIdAndDelete(req.params.id);
    if (!deletedProduct)
      return res.status(404).json({ message: "‚ùå Product not Found" });

    res.status(200).json({ message: "üóëÔ∏è Product Deleted Successfully!" });
  } catch (error) {
    res
      .status(500)
      .json({ message: "‚ùå Error deleting Product", error: error.message });
  }
};

// ==================== EXPORT ====================
module.exports = {
  createProduct,
  getAllProducts,
  getProductById,
  updateProduct,
  deleteProduct,
};
